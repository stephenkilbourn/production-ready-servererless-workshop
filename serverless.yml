service: workshop-${self:custom.name}

frameworkVersion: '3'

custom:
  name: stephenkilbourn
  export-env:
    overwrite: true
  apiGatewayThrottling:
    maxRequestsPerSecond: 10
    maxConcurrentRequests: 5
  exportOutputs:
    include:
      - E2eTestQueueUrl
      - CognitoUserPoolServerClientId
    output:
      file: ./.env-outputs
  logLevel:
    prod: INFO
    default: DEBUG
  serverless-iam-roles-per-function:
    defaultInherit: true
  lumigo:
    token: t_b675d8f003914fbda85fd
    nodePackageManager: npm

provider:
  name: aws
  runtime: nodejs16.x
  endpointType: REGIONAL
  apiGateway:
    metrics: true
  environment:
    serviceName: ${self:service}
    stage: ${sls:stage}
    rest_api_url:
      Fn::Join:
        - ""
        - - https://
          - !Ref ApiGatewayRestApi
          - .execute-api.${aws:region}.amazonaws.com/${sls:stage}
    LOG_LEVEL: ${self:custom.logLevel.${sls:stage}, self:custom.logLevel.default}
    SAMPLE_DEBUG_LOG_RATE: 0.1
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
  tracing:
    apiGateway: true
    lambda: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - "xray:PutTraceSegments"
            - "xray:PutTelemetryRecords"
          Resource: "*"
  eventBridge:
    useCloudFormation: true

functions:
  get-index:
    handler: functions/get-index.handler
    events:
      - http:
          path: /
          method: get
    environment:
      restaurants_api:
        Fn::Join:
          - ""
          - - https://
            - !Ref ApiGatewayRestApi
            - .execute-api.${aws:region}.amazonaws.com/${sls:stage}/restaurants
      cognito_user_pool_id: !Ref CognitoUserPool
      cognito_client_id: !Ref WebCognitoUserPoolClient
      orders_api:
        Fn::Join:
          - ""
          - - https://
            - !Ref ApiGatewayRestApi
            - .execute-api.${aws:region}.amazonaws.com/${sls:stage}/orders
    iamRoleStatements:
    - Effect: Allow
      Action: execute-api:Invoke
      Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/${sls:stage}/GET/restaurants
  get-restaurants:
    handler: functions/get-restaurants.handler
    memorySize: 512
    events:
      - http:
          path: /restaurants
          method: get
          authorizer: aws_iam
    environment:
      restaurants_table: !Ref RestaurantsTable
    iamRoleStatements:
    - Effect: Allow
      Action: dynamodb:scan
      Resource: !GetAtt RestaurantsTable.Arn
    - Effect: Allow
      Action: ssm:GetParameters*
      Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${self:service}/${sls:stage}/get-restaurants/config
  search-restaurants:
    handler: functions/search-restaurants.handler
    events:
      - http:
          path: /restaurants/search
          method: post
          request:
            schemas:
              application/json:
                schema: ${file(search_request.json)}
                name: SearchRequestModel
                description: 'Validation model for Search'
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
    environment:
      restaurants_table: !Ref RestaurantsTable
    iamRoleStatements:
    - Effect: Allow
      Action: dynamodb:scan
      Resource: !GetAtt RestaurantsTable.Arn
    - Effect: Allow
      Action: ssm:GetParameters*
      Resource:
        - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${self:service}/${sls:stage}/search-restaurants/config
        - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${self:service}/${sls:stage}/search-restaurants/secretString
    - Effect: Allow
      Action: kms:Decrypt
      Resource: ${ssm:/${sls:stage}/kmsArn}
  place-order:
    handler: functions/place-order.handler
    events:
      - http:
          path: /orders
          method: post
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
    environment:
      bus_name: !Ref EventBus
    iamRoleStatements:
    - Effect: Allow
      Action: events:PutEvents
      Resource: !GetAtt EventBus.Arn
  notify-restaurant:
    handler: functions/notify-restaurant.handler
    events:
      - eventBridge:
          eventBus: !Ref EventBus
          pattern:
            source:
              - big-mouth
            detail-type:
              - order_placed
    environment:
      bus_name: !Ref EventBus
      restaurant_notification_topic: !Ref RestaurantNotificationTopic
    iamRoleStatements:
    - Effect: Allow
      Action: events:PutEvents
      Resource: !GetAtt EventBus.Arn
    - Effect: Allow
      Action: sns:Publish
      Resource: !Ref RestaurantNotificationTopic

resources:
  Conditions:
    IsE2eTest:
      Fn::EndsWith: [ "${sls:stage}", dev ]
  Resources:
    WebAppCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: !Sub ${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com
              Id: WebApp
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: https-only
              OriginPath: /${sls:stage}
          Enabled: true
          CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            TargetOriginId: WebApp
            ## Defining if and how the QueryString and Cookies are forwarded to the origin which in this case is S3
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            ## The protocol that users can use to access the files in the origin. To allow HTTP use `allow-all`
            ViewerProtocolPolicy: redirect-to-https
          ## The certificate to use when viewers use HTTPS to request objects.
          ViewerCertificate:
            CloudFrontDefaultCertificate: true
    RestaurantsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        AliasAttributes:
          - email
        UsernameConfiguration:
          CaseSensitive: false
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireUppercase: true
            RequireSymbols: true
        Schema:
          - AttributeDataType: String
            Mutable: true
            Name: given_name
            Required: true
            StringAttributeConstraints:
              MinLength: "1"
          - AttributeDataType: String
            Mutable: true
            Name: family_name
            Required: true
            StringAttributeConstraints:
              MinLength: "1"
          - AttributeDataType: String
            Mutable: true
            Name: email
            Required: true
            StringAttributeConstraints:
              MinLength: "1"
    WebCognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: web
        UserPoolId: !Ref CognitoUserPool
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED
    ServerCognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: server
        UserPoolId: !Ref CognitoUserPool
        ExplicitAuthFlows:
          - ALLOW_ADMIN_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED
    ServiceUrlParameter:
      Type: AWS::SSM::Parameter
      Properties:
        Type: String
        Name: /${self:service}/${sls:stage}/serviceUrl
        Value:
          Fn::Join:
            - ""
            - - https://
              - !Ref ApiGatewayRestApi
              - .execute-api.${aws:region}.amazonaws.com/${sls:stage}
    EventBus:
      Type: AWS::Events::EventBus
      Properties:
        Name: order_events_${sls:stage}_${self:custom.name}
    RestaurantNotificationTopic:
      Type: AWS::SNS::Topic
    E2eTestQueue:
      Type: AWS::SQS::Queue
      Condition: IsE2eTest
      Properties:
        MessageRetentionPeriod: 60
        VisibilityTimeout: 1
    E2eTestQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Condition: IsE2eTest
      Properties:
        Queues:
          - !Ref E2eTestQueue
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal: "*"
              Action: SQS:SendMessage
              Resource: !GetAtt E2eTestQueue.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !Ref RestaurantNotificationTopic
            - Effect: Allow
              Principal: "*"
              Action: SQS:SendMessage
              Resource: !GetAtt E2eTestQueue.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !GetAtt E2eTestEventBridgeRule.Arn
    E2eTestSnsSubscription:
      Type: AWS::SNS::Subscription
      Condition: IsE2eTest
      Properties:
        Protocol: sqs
        Endpoint: !GetAtt E2eTestQueue.Arn
        RawMessageDelivery: false
        Region: !Ref AWS::Region
        TopicArn: !Ref RestaurantNotificationTopic
    E2eTestEventBridgeRule:
      Type: AWS::Events::Rule
      Condition: IsE2eTest
      Properties:
        EventBusName: !Ref EventBus
        EventPattern:
          source: ["big-mouth"]
        State: ENABLED
        Targets:
          - Arn: !GetAtt E2eTestQueue.Arn
            Id: e2eTestQueue
            InputTransformer:
              InputPathsMap:
                source: "$.source"
                detailType: "$.detail-type"
                detail: "$.detail"
              InputTemplate: !Sub >
                {
                  "event": {
                    "source": <source>,
                    "detail-type": <detailType>,
                    "detail": <detail>
                  },
                  "eventBusName": "${EventBus}"
                }
  Outputs:
    RestaurantsTableName:
      Value: !Ref RestaurantsTable

    CognitoUserPoolId:
      Value: !Ref CognitoUserPool

    CognitoUserPoolArn:
      Value: !GetAtt CognitoUserPool.Arn

    CognitoUserPoolWebClientId:
      Value: !Ref WebCognitoUserPoolClient

    CognitoUserPoolServerClientId:
      Value: !Ref ServerCognitoUserPoolClient

    EventBusName:
      Value: !Ref EventBus

    RestaurantNotificationTopicName:
      Value: !GetAtt RestaurantNotificationTopic.TopicName

    RestaurantNotificationTopicArn:
      Value: !Ref RestaurantNotificationTopic

    WebAppCloudFrontDistributionOutput:
      Value:
        'Fn::GetAtt': [ WebAppCloudFrontDistribution, DomainName ]

    E2eTestQueueUrl:
      Condition: IsE2eTest
      Value: !Ref E2eTestQueue

plugins:
  - serverless-export-env
  - serverless-api-gateway-throttling
  - serverless-export-outputs
  - serverless-plugin-extrinsic-functions
  - serverless-iam-roles-per-function
  - serverless-lumigo